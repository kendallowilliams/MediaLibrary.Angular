// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using MediaLibrary.DAL.Models;
using Microsoft.EntityFrameworkCore;

namespace MediaLibrary.DAL.DbContexts;

public partial class MediaLibraryEntities : DbContext
{
    public MediaLibraryEntities(DbContextOptions<MediaLibraryEntities> options)
        : base(options)
    {
    }

    public virtual DbSet<Album> Albums { get; set; }

    public virtual DbSet<Artist> Artists { get; set; }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<Episode> Episodes { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Playlist> Playlists { get; set; }

    public virtual DbSet<PlaylistEpisode> PlaylistEpisodes { get; set; }

    public virtual DbSet<PlaylistPodcastItem> PlaylistPodcastItems { get; set; }

    public virtual DbSet<PlaylistTrack> PlaylistTracks { get; set; }

    public virtual DbSet<Podcast> Podcasts { get; set; }

    public virtual DbSet<PodcastItem> PodcastItems { get; set; }

    public virtual DbSet<Series> Series { get; set; }

    public virtual DbSet<Track> Tracks { get; set; }

    public virtual DbSet<TrackPath> TrackPaths { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Album>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Artist).WithMany(p => p.Albums).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Genre).WithMany(p => p.Albums).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<Artist>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.Property(e => e.CreateDate).HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("GETDATE()");
        });

        modelBuilder.Entity<Episode>(entity =>
        {
            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<Playlist>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<PlaylistEpisode>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Episode).WithMany(p => p.PlaylistEpisodes).HasConstraintName("FK_playlist_episode_episode");

            entity.HasOne(d => d.Playlist).WithMany(p => p.PlaylistEpisodes).HasConstraintName("FK_playlist_episode_playlist");
        });

        modelBuilder.Entity<PlaylistPodcastItem>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Playlist).WithMany(p => p.PlaylistPodcastItems).HasConstraintName("FK_playlist_podcastitem_playlist");

            entity.HasOne(d => d.PodcastItem).WithMany(p => p.PlaylistPodcastItems).HasConstraintName("FK_playlist_podcastitem_podcastitem");
        });

        modelBuilder.Entity<PlaylistTrack>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Playlist).WithMany(p => p.PlaylistTracks).HasConstraintName("FK_playlist_track_playlist");

            entity.HasOne(d => d.Track).WithMany(p => p.PlaylistTracks).HasConstraintName("FK_playlist_track_track");
        });

        modelBuilder.Entity<Podcast>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<PodcastItem>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<Series>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<Track>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Album).WithMany(p => p.Tracks).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Artist).WithMany(p => p.Tracks).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Genre).WithMany(p => p.Tracks).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Path).WithMany(p => p.Tracks).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<TrackPath>(entity =>
        {
            entity.HasKey(e => e.Id).IsClustered(false);

            entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.LastScanDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}